<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gogi.meatyou.repository.MemberMapper">

   <select id="memberList" resultType="com.gogi.meatyou.bean.MemberDTO">
      select * from member
   </select>


   <resultMap id="memberMap" type="com.gogi.meatyou.bean.MemberDTO" >
      <result property="m_id" column="m_id" />
      <result property="passwd" column="passwd" />
      <result property="m_name" column="m_name" />
      <result property="birth" column="birth" />
      <result property="m_addr1" column="m_addr1" />
      <result property="m_addr2" column="m_addr2" />
      <result property="email" column="email" />
      <result property="telep" column="telep" />
      <result property="phone" column="phone" />
      <result property="m_reg_date" column="m_reg_date" />
      <result property="m_status" column="m_status" />
      <collection property="mstatus_list" resultMap="status" />  
      
   </resultMap>
   <resultMap id="status" type="com.gogi.meatyou.bean.MemStatusDTO" >
      <result property="mstat_m_status" column="msta_m_status" />
      <result property="mstat_detail" column="mstat_detail" />
      <result property="mstat_auth" column="mstat_auth" />
   </resultMap>
   

   <select id="read" resultMap="memberMap" resultType="com.gogi.meatyou.bean.MemberDTO" >      
         select * from member a left outer join memstatus b
                  on a.m_status = b.mstat_m_status
                  where a.m_id=#{m_id}
   </select>
   
   
   
   
   
   <select id="member" resultType="com.gogi.meatyou.bean.MemberDTO">
      select * from member where  m_id=#{m_id}
   </select>
   
   
<select id="shoppingcartCheck" resultType="com.gogi.meatyou.bean.ShoppingCartDTO">
    select * from shoppingcart_${m_id} where shop_m_id=#{m_id}
</select>


 <!--장바구니 목록출력 -->
<select id="ShoppingCartAndProduct" resultType="com.gogi.meatyou.bean.ShoppingCartDTO">
    SELECT
        sc.shop_num,
        sc.shop_m_id,
        sc.shop_quantity,
        p.p_num,
        p.p_name,
        p.thumb,
        p.p_price
    FROM
        shoppingcart_${shop_m_id} sc
    INNER JOIN
        product p ON sc.shop_p_num = p.p_num
</select>

<!--장바구니 수량변경  -->
   <update id="updateQuantity"  >
        UPDATE shoppingcart_${shop_m_id} SET shop_quantity = #{shop_quantity} WHERE shop_num = #{shop_num}
    </update>

  <!-- 특정 회원의 장바구니 목록 조회 (페이징 처리) -->

<select id="getShoppingCartItemsPaged" parameterType="map" resultType="com.gogi.meatyou.bean.ShoppingCartDTO">
    <![CDATA[
SELECT rnum, shop_num, shop_m_id,shop_quantity, p_num, p_name, thumb, p_price,p_m_id
FROM (
    SELECT ROWNUM AS rnum, t.*
    FROM (
        SELECT
            sc.shop_num,
            sc.shop_m_id,
            sc.shop_quantity,
            p.p_num,
            p.p_name,
            p.thumb,
            p.p_price,
            p.p_m_id
        FROM
            shoppingcart_${shop_m_id} sc
        INNER JOIN
            product p ON sc.shop_p_num = p.p_num
        ORDER BY sc.shop_num
    ) t
    WHERE ROWNUM <= #{endRow, jdbcType=NUMERIC}
)
WHERE rnum >= #{startRow, jdbcType=NUMERIC}

    ]]>
</select>


<!-- 총 카운트 보기 -->

<select id="getTotalShoppingCartItems" resultType="int">
    SELECT COUNT(*)
    FROM shoppingcart_${shop_m_id}
</select>
    
    <!-- 여기까지가 페이징 -->
    
<!-- 게시물 선택 삭제  -->
   <delete id="deleteSelectedItems" parameterType="map">
       DELETE FROM shoppingcart_${shop_m_id}
       WHERE shop_num IN
       <foreach item="item" collection="selectedItems" open="(" separator="," close=")">
           #{item}    
       </foreach>
       AND shop_m_id = #{shop_m_id}
   </delete>
<!-- 카트 삭제 -->
   <delete id="deleteCart">
                                   
      delete from shoppingcart_${shop_m_id} where shop_num = #{shop_num}
   
   </delete>


<!-- 찜 업체  리스트   -->
<select id="pickMeCheck" resultType="com.gogi.meatyou.bean.PickMeDTO">
    select * from pick_me_${m_id} where pm_m_id=#{m_id}
</select>


  <!-- 찜 확인  -->

<select id="pickMeCountPage"   resultType="com.gogi.meatyou.bean.PickMeDTO">
    <![CDATA[
SELECT rnum, pm_num,pm_m_id, pm_c_id,ceoname,cus_address1,cus_address2,company,cus_pnum 
FROM (
    SELECT ROWNUM AS rnum, t.*
    FROM (
        SELECT
            pp.pm_num,
            pp.pm_m_id,
          pp.pm_c_id,
          cu.ceoname,
          cu.cus_address1,
          cu.cus_address2,
          cu.company,
          cu.cus_pnum
        FROM
           pick_me_${pm_m_id} pp
        INNER JOIN
           cus_detail cu ON pp.pm_c_id = cu.cus_m_id
      ORDER BY  pp.pm_num 
   ) t
    WHERE ROWNUM <= #{endRow, jdbcType=NUMERIC}
)
WHERE rnum >= #{startRow, jdbcType=NUMERIC}

    ]]>
</select>


<!-- 총 카운트 보기 -->

<select id="pickMeCount" resultType="int">
    SELECT COUNT(*)
    FROM pick_me_${pm_m_id}
</select>
    
<!-- 찜 업체  선택 삭제  -->
   <delete id="deleteHim" parameterType="map">  
      delete from pick_me_${pm_m_id} where pm_num = #{pm_num}
   </delete>


<!-- 찜업체 추가   -->

 <insert id="pick_mem_Insert" parameterType="com.gogi.meatyou.bean.ShoppingCartDTO">
      insert into pick_me_${p_m_id} values(p_pick_${p_m_id}_seq.nextval, #{p_m_id}, #{pm_c_id})
   </insert>   
 <insert id="pick_saller_Insert" parameterType="com.gogi.meatyou.bean.ShoppingCartDTO">
      insert into pick_me_${pm_c_id} values(p_pick_${pm_c_id}_seq.nextval,#{pm_m_id}, #{pm_c_id}, )
   </insert>   




  <!-- 특정 찜목록 조회 (페이징 처리) -->


<!-- 상품 찜 -->
<select id="pPickCountPage" parameterType="map" resultType="com.gogi.meatyou.bean.PPicDTO">
  <![CDATA[
 SELECT
  rnum, ppic_num, ppic_m_id, ppic_p_num,p_m_id, p_num, p_name, thumb, p_reg_date, startdate, enddate, p_status, p_price, cus_m_id, cus_address1, cus_address2
FROM (
  SELECT
    ROWNUM AS rnum, t.*
  FROM (
    SELECT
      pp.ppic_num, pp.ppic_m_id, pp.ppic_p_num,p.p_m_id,p.p_num, p.p_name, p.thumb, p.p_reg_date, p.startdate, p.enddate, p.p_status, p.p_price,c.cus_m_id, c.cus_address1, c.cus_address2 
    FROM
      p_pick_${ppic_m_id} pp
    INNER JOIN
      product p ON pp.ppic_p_num = p.p_num
    INNER JOIN
    cus_detail c ON pp.ppic_m_id = c.cus_m_id
    ORDER BY
      pp.ppic_num
  ) t
  WHERE
    ROWNUM <= #{endRow}
)
WHERE
  rnum >= #{startRow}
    ]]>
</select>

<!-- 총 카운트 보기 -->

<select id="pPickCount" resultType="int">
    SELECT COUNT(*)
    FROM p_pick_${ppic_m_id}
</select>
    
<!-- 찜  상품 삭제  -->
   <delete id="deleteP_item" parameterType="map">  
      delete from p_pick_${ppic_m_id} where ppic_num = #{ppic_num}
   </delete>










      <insert id="insertMember" parameterType="com.gogi.meatyou.bean.MemberDTO">
    <![CDATA[
    INSERT INTO member(m_id, passwd, m_name, birth, m_addr1, m_addr2, email, telep, phone, m_reg_date, m_status)
    VALUES (
        #{m_id},
        #{passwd},
        #{m_name},
        to_date(#{birth}, 'YYYY-MM-DD'),
        #{m_addr1},
        #{m_addr2},
        #{email},
        #{telep},
        #{phone},
        TO_CHAR(SYSDATE, 'YYYY-MM-DD'), 
       1001)
    ]]>
</insert>

<insert id="prefer">
    <![CDATA[
        insert into prefer(pre_num, pre_m_id, pre0_response, pre1_response, pre2_response, pre_reg_date, pre_status)
        values(
            prefer_seq.nextval,
           #{m_id},
            null,
            null,
            null,
            sysdate, 
            0
        )
    ]]>
</insert>


<!--장바구니 생성-->
         <insert id="shoppingCart" >
    <![CDATA[
        CREATE TABLE ShoppingCart_${m_id} (
            shop_num NUMBER PRIMARY KEY, 
           shop_m_id VARCHAR2(1000) NOT NULL, 
            shop_p_num NUMBER NOT NULL,
             shop_quantity NUMBER NOT NULL,
            CONSTRAINT fk_shop_member_${m_id} FOREIGN KEY (shop_m_id) REFERENCES MEMBER (m_id) ON DELETE CASCADE,
            CONSTRAINT fk_shop_product_${m_id} FOREIGN KEY (shop_p_num) REFERENCES PRODUCT (p_num) ON DELETE CASCADE
        )
    ]]>
</insert>

            <insert id="shoppingCart_seq">
             <![CDATA[
               create sequence shoppingcart_${m_id}_seq   NOCACHE   
                   ]]>
            </insert>
            
            
                        
                     <insert id="pick_me">
                <![CDATA[
                    CREATE TABLE pick_me_${m_id} (
                        pm_num NUMBER PRIMARY KEY,
                        pm_m_id VARCHAR2(1000) NOT NULL,
                        pm_c_id VARCHAR2(1000) NOT NULL,
                        CONSTRAINT fk_pick_me_member_${m_id}_1 FOREIGN KEY (pm_m_id) REFERENCES MEMBER (m_id) ON DELETE CASCADE,
                        CONSTRAINT fk_pick_me_member_${m_id}_2 FOREIGN KEY (pm_c_id) REFERENCES MEMBER (m_id) ON DELETE CASCADE
                    )
                ]]>
            </insert>

            
            <insert id="pick_me_seq">
             <![CDATA[
            create   sequence pick_me_${m_id}_Seq   NOCACHE
                ]]>
            </insert>
            
            
            <insert id="p_pick">
             <![CDATA[
                 CREATE TABLE p_pick_${m_id} (
                     ppic_num NUMBER PRIMARY KEY,
                     ppic_p_num NUMBER NOT NULL,
                     ppic_m_id VARCHAR2(1000) NOT NULL,
                     CONSTRAINT p_pick_product_${m_id} FOREIGN KEY (ppic_p_num) REFERENCES product (p_num) ON DELETE CASCADE,
                     CONSTRAINT p_pick_member_${m_id} FOREIGN KEY (ppic_m_id) REFERENCES MEMBER (m_id) ON DELETE CASCADE
                 )
             ]]>
         </insert>

            
            
            <insert id="p_pick_seq">
             <![CDATA[
            create   sequence p_pick_${m_id}_Seq   NOCACHE
                   ]]>
            </insert>
            
            
         
      <update id="memberUpdate" parameterType="com.gogi.meatyou.bean.MemberDTO">
      update member 
         <set>
            <if test="passwd != null and passwd != '' ">passwd=#{passwd},</if>
            <if test="m_name != null and m_name != '' ">m_name=#{m_name},</if>
      <!--       <if test="birth != null and birth != '' "> birth = TO_DATE(#{birth}, 'YYYY-MM-DD HH24:MI:SS.FF'),,</if> -->
            <if test="m_addr1 != null and m_addr1 != '' ">m_addr1=#{m_addr1},</if>
            <if test="m_addr2 != null and m_addr2 != '' ">m_addr2=#{m_addr2},</if>
            <if test="email != null and email != '' ">email=#{email},</if>
            <if test="telep != null and telep != '' ">telep=#{telep},</if>
            <if test="phone != null and phone != '' ">phone=#{phone}</if>
         </set> 
      where m_id=#{m_id}
   </update>
   <!-- 
   
      <update id="statusChange" parameterType="com.gogi.meatyou.bean.MemberDTO" >
      update member set m_status = 1001 where m_id=#{m_id} and passwd = #{passwd}      
   </update>
   
   
    -->
   
   <update id="statusChange" parameterType="com.gogi.meatyou.bean.MemberDTO" >
      update member set m_status = 1000 where  passwd = #{passwd}      
   </update>
   

   
   <update id="statusAdminChange" parameterType="com.gogi.meatyou.bean.MemberDTO">
      update member set m_status=#{m_status} where m_id=#{m_id}
   </update>
             
      
      
      
      
            
            <!-- Update Member Status -->
      <update id="updateMemberStatus" parameterType="com.gogi.meatyou.bean.MemberDTO">
          UPDATE member
          SET m_status = 1050
          WHERE m_id = #{m_id}
      </update>
      

            
               <insert id="insertIntoCusDetail" parameterType="com.gogi.meatyou.bean.CusDetailDTO">
				    <![CDATA[
				    INSERT INTO cus_detail(cus_num,cus_m_id, ceoname, corpno, company, cus_address1, cus_address2, cus_pnum,cus_accnum)
				    VALUES (
				       cus_detail_seq.nextval,
				        #{cus_m_id},
				        #{ceoname},
				        #{corpno},
				        #{company},
				        #{cus_address1},
				        #{cus_address2},
				        #{cus_pnum},
				        #{cus_accnum}
				)
				    ]]>
				</insert>


      
      
   
      
      
      
</mapper>