<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gogi.meatyou.repository.AdminMapper">
	<resultMap type="com.gogi.meatyou.bean.MemberDTO" id="memberMap">
		<result property="m_id" column="m_id"/>
		<result property="passwd" column="passwd"/>
		<result property="m_name" column="m_name"/>
		<association property="mstatDto" javaType="com.gogi.meatyou.bean.MemStatusDTO">
			<result property="msta_m_status" column="msta_m_status"/>
			<result property="mstat_detail" column="mstat_detail"/>
			<result property="mstat_auth" column="mstat_auth"/>
		</association>
		</resultMap>
		 
		 <!--
		  <collection property="MemStatusDTO" resultMap="memStatus" />
				</resultMap>
				<resultMap type="com.gogi.meatyou.bean.MemStatusDTO" id="memStatus">
						<result property="msta_m_status" column="msta_m_status"/>
						<result property="mstat_detail" column="mstat_detail"/>
						<result property="mstat_auth" column="mstat_auth"/>	
				</resultMap>	
		 -->

    <select id="test" resultMap="memberMap" parameterType="String">
		select * from member m,memStatus s where m.m_status=s.msta_m_status and m.m_id=#{m_id}
	</select> 

	
	<select id="read" resultType="com.gogi.meatyou.bean.MemberDTO" parameterType="String">
		select * from member m,memStatus s where m.m_status=s.msta_m_status and m.m_id=#{m_id}
	</select>
	
	<select id="memberList" resultType="com.gogi.meatyou.bean.MemberDTO" parameterType="hashMap">
		<![CDATA[
		select * from (select mem.*,rownum r from (select * from member m,memstatus ms where m.m_status=ms.msta_m_status and m.m_status between 1001 and 1049) mem) where r>=#{start} and r<=#{end}
		]]>
	</select>
	<select id="customList" resultType="com.gogi.meatyou.bean.MemberDTO" parameterType="hashMap">
		<![CDATA[
		select * from (select mem.*,rownum r from (select * from member m,memstatus ms where m.m_status=ms.msta_m_status and m.m_status between 2001 and 2999) mem) where r>=#{start} and r<=#{end}
		]]>
	</select>
	<select id="cusWaitList" resultType="com.gogi.meatyou.bean.MemberDTO" parameterType="hashMap">
		<![CDATA[
		select * from (select mem.*,rownum r from (select * from member m,memstatus ms where m.m_status=ms.msta_m_status and m.m_status between 1050 and 1099) mem) where r>=#{start} and r<=#{end}
		]]>
	</select>
	<select id="cusPaidList" resultType="com.gogi.meatyou.bean.MemberDTO" parameterType="hashMap">
		<![CDATA[
		select * from (select mem.*,rownum r from (select * from member m,memstatus ms where m.m_status=ms.msta_m_status and m.m_status between 2002 and 2004) mem) where r>=#{start} and r<=#{end}
		]]>
	</select>
	<select id="memCount">
	<![CDATA[
		select count(*) from member where m_status>1000 and m_status<2000
		]]>
	</select>
	<select id="cusCount">
	<![CDATA[
		select count(*) from member where m_status>2000 and m_status<3000
		]]>
	</select>
	<select id="cusWaitCount">
	<![CDATA[
		select count(*) from member where m_status>=1050 and m_status<1100
		]]>
	</select>
		<select id="cusPaidCount">
	<![CDATA[
		select count(*) from member where m_status between 2002 and 2004
		]]>
	</select>
	<select id="goodMember" resultType="String">
		<![CDATA[
		select order_m_id,sum(order_p_price) from (select order_m_id,order_paydate,order_p_price from m_order where order_paydate>=add_months(trunc(sysdate,'mm'),-1) and order_paydate<=trunc(sysdate,'mm')-1) group by order_m_id having sum(order_p_price)>=200000
		]]>
	</select>
	<select id="bestMember" resultType="String">
		<![CDATA[
		select order_m_id,sum(order_p_price) from (select order_m_id,order_paydate,order_p_price from m_order where order_paydate>=add_months(trunc(sysdate,'mm'),-1) and order_paydate<=trunc(sysdate,'mm')-1) group by order_m_id having sum(order_p_price)>=400000
		]]>
	</select>
	<update id="goodMemberUpdate" parameterType="java.util.List">
		update member set m_status=1002 where m_id in
			<foreach collection="list" item="item" index="index" open="(" close =")" separator=",">
				#{item}
			</foreach>
	</update>
	<update id="statChange" parameterType="com.gogi.meatyou.bean.MemberDTO">
		update member set m_status=#{m_status} where m_id=#{m_id}
	</update>
	<update id="bestMemberUpdate" parameterType="java.util.List">
		update member set m_status=1003 where m_id in(
			<foreach collection="array" item="item" index="index" separator=",">
				${item}
			</foreach>
			)
	</update>
	<select id="getProductSalse" resultType="int">
		<choose>
			<when test="check==0">
			<![CDATA[
			select nvl(sum(order_totalprice),0) from m_order where order_paydate>=trunc(sysdate,'MM') and order_paydate<sysdate
			]]>
			</when>
			<when test="check==-1">
			<![CDATA[
			select nvl(sum(order_totalprice),0) from m_order where order_paydate>=add_months(trunc(sysdate,'mm'),${check}) and order_paydate<=trunc(sysdate,'mm') ${check}
			]]>
			</when>
			<otherwise>
			<![CDATA[
			select nvl(sum(order_totalprice),0) from m_order where order_paydate>=add_months(trunc(sysdate,'mm'),${check}) and order_paydate<=add_months(trunc(sysdate,'mm'),${check}+1)-1
			]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="getProductComm" resultType="int">
		<choose>
			<when test="check==0">
			<![CDATA[
				select nvl(sum(order_totalprice/10),0) from m_order where order_paydate>=trunc(sysdate,'MM') and order_paydate<sysdate
			]]>
			</when>
			<when test="check==-1">
			<![CDATA[
				select nvl(sum(order_totalprice/10),0) from m_order  where order_paydate>=add_months(trunc(sysdate,'mm'),${check}) and order_paydate<=trunc(sysdate,'mm') ${check}									
			]]>
			</when>
			<otherwise>
			<![CDATA[
				select nvl(sum(order_totalprice/10),0) from m_order  where order_paydate>=add_months(trunc(sysdate,'mm'),${check}) and order_paydate<=add_months(trunc(sysdate,'mm'),${check}+1)-1 									
			]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="getPaidItem" resultType="int">
		<choose>
			<when test="check==0">
			<![CDATA[
				select nvl(sum(co_quantity*co_pay),0) from cus_order where co_category=2003 and co_paydate>=trunc(sysdate,'MM') and co_paydate<sysdate
			]]>
			</when>
			<when test="check==-1">
			<![CDATA[
				select nvl(sum(co_quantity*co_pay),0) from cus_order where co_category=2003 and  co_paydate>=add_months(trunc(sysdate,'mm'),${check}) and co_paydate<=trunc(sysdate,'mm') ${check}									
			]]>
			</when>
			<otherwise>
			<![CDATA[
				select nvl(sum(co_quantity*co_pay),0) from cus_order where co_category=2003 and  co_paydate>=add_months(trunc(sysdate,'mm'),${check}) and co_paydate<=add_months(trunc(sysdate,'mm'),${check}+1)-1									
			]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="getPaidAdv" resultType="int">
		<choose>
			<when test="check==0">
			<![CDATA[
				select nvl(sum(co_quantity*co_pay),0) from cus_order where co_category=2003 and co_paydate>=trunc(sysdate,'MM') and co_paydate<sysdate
			]]>
			</when>
			<when test="check==-1">
			<![CDATA[
				select nvl(sum(co_quantity*co_pay),0) from cus_order where co_category=2002 and co_paydate>=add_months(trunc(sysdate,'MM') ,${check}) and co_paydate<trunc(sysdate,'mm') ${check}									
			]]>
			</when>
			<otherwise>
			<![CDATA[
				select nvl(sum(co_quantity*co_pay),0) from cus_order where co_category=2002 and co_paydate>=add_months(trunc(sysdate,'MM') ,${check}) and co_paydate<add_months(trunc(sysdate,'mm') ,${check}+1)-1									
			]]>
			</otherwise>
		</choose>
	</select>
	<select id="getUsedCoupon" resultType="int">
		<choose>
			<when test="check==0">
			<![CDATA[
				select nvl(sum(cp_price),0) from (select * from coupon where usedate>=trunc(sysdate,'mm') and usedate<sysdate)
			]]>
			</when>
			<when test="check==-1">
			<![CDATA[
				select nvl(sum(cp_price),0) from coupon where usedate>=add_months(trunc(sysdate,'mm'),${check}) and usedate<=trunc(sysdate,'mm')${check}									
			
			]]>
			</when>
			<otherwise>
			<![CDATA[
				select nvl(sum(cp_price),0) from coupon where usedate>=add_months(trunc(sysdate,'mm'),${check}) and usedate<=add_months(trunc(sysdate,'mm'),${check}+1)-1									
			
			]]>
			</otherwise>
		</choose>
	
	
	</select>
	
	
	<select id="getCheckProductSalse" resultType="int" parameterType="String">
		
	</select>
	<select id="getCheckProductComm" resultType="int" parameterType="String">
	<![CDATA[
		]]>
	</select>
	<select id="getCheckPaidItem" resultType="int" parameterType="String">
	<![CDATA[
		]]>
	</select>
	<select id="getCheckPaidAdv" resultType="int" parameterType="String">
	<![CDATA[
		]]>
	</select>
	<select id="getCheckUsedCoupon" resultType="int" parameterType="String">
	<![CDATA[
		]]>
	</select>
	
	
	
	
	
	
	
	
</mapper>